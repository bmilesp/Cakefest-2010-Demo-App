<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" 
			   minHeight="400" width="1007" height="400"
			   initialize="init()"  
			   xmlns:components="components.*"> 
	<fx:Declarations> 
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	
		<!-- note that the selectedDataModel can be created dynamically, i just created it
			statically here to help illustrate this demo -->
		<fx:XML id="selectedDataModel">
		  <xml>
			<book>
				<id></id>
				<name></name>
				<shelf_id></shelf_id>
				<category_id></category_id>
				<year_published></year_published>
			</book>
			<color>
				<color>
				</color>
			</color>
		  </xml>
		</fx:XML>
		
		<s:HTTPService id="getListData" url="../data" resultFormat="e4x" result="listLoad(event)" />
		<s:HTTPService id="saveBook" url="../books/save" resultFormat="e4x" method="POST" 
					   result="saveBook_resultHandler(event)" /> 
		<s:HTTPService id="deleteBook" url="../books/delete" method="POST" 
					   result="clear_data()" /> 
	</fx:Declarations>
	
	
	<fx:Binding source="selectedDataModel.book.name" destination="bookName.text" twoWay="true"/>
	<fx:Binding source="selectedDataModel.book.shelf_id" destination="shelves.selectedId" twoWay="true"/>
	<fx:Binding source="selectedDataModel.book.category_id" destination="categories.selectedId" twoWay="true"/>
	<fx:Binding source="selectedDataModel.color" destination="colors.selectedIds" twoWay="true"/>
	<fx:Binding source="selectedDataModel.book.year_published" destination="year_published.selectedItem" twoWay="true"/>
	
	
	<fx:Script>
		<![CDATA[
			import flash.utils.describeType;
			import flash.utils.getQualifiedClassName;
			
			import flashx.textLayout.events.ModelChange;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			var dataXML:XML;
			
			[Bindable]
			var years:ArrayCollection = new ArrayCollection([2001,2002,2003,2004,2005,2006,2007,2008,2009,2010]);
			
			public function init():void{
				getListData.send();
			} 
			
			public function listLoad(event:ResultEvent):void{
				dataXML = new XML(event.result);
				categories.dataProvider = new XMLListCollection(dataXML.categories.category);
				colors.dataProvider = new XMLListCollection(dataXML.color);
				shelves.dataProvider = new XMLListCollection(dataXML.shelf);
				books.dataProvider = new XMLListCollection(dataXML.book);
				
				//open all categories in tree by default
				categories.openItems = dataXML..category;
				//set default for year published
				selectedDataModel.book.year_published = 2001;
			}
			
			
			protected function books_changeHandler(event:IndexChangeEvent):void
			{
				selectedDataModel.book.id = event.currentTarget.selectedItem.@id;
				selectedDataModel.book.category_id = event.currentTarget.selectedItem.@category_id;
				selectedDataModel.book.year_published = event.currentTarget.selectedItem.@year_published;
				selectedDataModel.book.shelf_id = event.currentTarget.selectedItem.@shelf_id;
				selectedDataModel.book.name = event.currentTarget.selectedItem.@name;
				selectedDataModel.replace('color', formatColorsXml(event.currentTarget.selectedItem.color));
			}
			
			protected function formatColorsXml(colors:XMLList)
			{
				var colorsChildren:XML = new XML('<data/>'); 
				for each(var id in colors.@id){
					colorsChildren.appendChild(XMLList('<color>'+id+'</color>'));
				}
				return colorsChildren.color;
			}
			

			protected function save_clickHandler(event:MouseEvent):void
			{
				var params:Object = {};
				params['xml'] = XML(selectedDataModel.toXMLString()); 
				saveBook.send(params); 
			}
			
			protected function delete_clickHandler(event:MouseEvent):void
			{
				var params:Object = {};
				params['id'] =books.selectedItem.@id;
				books.dataProvider.removeItemAt(books.selectedIndex);
				deleteBook.send(params);
			}

			protected function saveBook_resultHandler(event:ResultEvent):void
			{
				dataXML = new XML(event.result);
				books.dataProvider = new XMLListCollection(dataXML.book);
				clear_data();
			}

			protected function clear_data():void
			{
				//clear model data:
				delete selectedDataModel.book.id.*;
				delete selectedDataModel.book.name.*;
				delete selectedDataModel.book.category_id.*;
				delete selectedDataModel.book.shelf_id.*;
				selectedDataModel.book.year_published = 2001;
				delete selectedDataModel.color.*;
				
				//remove selected indexes (for non custom components):
				books.selectedIndex = -1;
				colors.selectedIndex = -1;
				shelves.selectedIndex = -1;
				year_published.selectedIndex = -1;
				categories.selectedIndex = -1;
			}

		]]>
	</fx:Script>
	<s:Label x="10" y="43" text="Categories"/>
	<components:CategoriesTree id="categories" x="10" y="59" 
		height="331" width="363" labelField="@name"></components:CategoriesTree>
	<s:Label x="381" y="87" text="Year Published"/>
	<s:DropDownList id="year_published" x="381" y="107" width="177" dataProvider="{years}"
					selectedItem="{Number(selectedDataModel.book.year_published)}"></s:DropDownList> 
	<s:Label x="566" y="43" text="Cover Colors"/>
	<components:ColorList id="colors" x="566" y="59" width="227" height="331"  
						  allowMultipleSelection="true" />
	<s:Label x="801" y="99" text="Books" />
	<s:List id="books"  x="801" y="113" height="277" width="196" labelField="@name" 
			change="books_changeHandler(event)"></s:List>
	<s:Label x="14" y="16" text="Book Title"/>
	<s:TextInput id="bookName" x="76" y="10" width="297"/>
	<s:Label x="381" y="185" text="Shelf Placements"/>
	<components:ShelvesList id="shelves" x="381" y="205" width="177" height="185"/>  
	<s:Button id="clear" x="913" y="10" label="Clear" width="84" click="clear_data()"/>
	<s:Button id="save" x="913" y="39" label="Save Book" width="84" click="save_clickHandler(event)"/>
	<s:Button id="delete" x="913" y="68" label="Delete" width="84" click="delete_clickHandler(event)"/>
</s:Application>